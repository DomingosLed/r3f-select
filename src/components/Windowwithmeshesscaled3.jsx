/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 windowwithmeshesscaled3.glb 
*/

import React, { useRef, useState } from 'react'
import { useGLTF, useAnimations, Edges, useSelect, useCursor } from '@react-three/drei'
import { FirstLevaControl, useControls } from '@/components/FirstLevaControl'

export function Model(props) {
  const [selected, setSelected] = useState()

  const [shiny, setShiny] = useState(false)
  const [hovered, setHover] = useState(false)
  const selecteded = useSelect().map((sel) => sel.userData.store)
  const [store, materialProps] = useControls(selecteded, FirstLevaControl)
  const isSelected = !!selecteded.find((sel) => sel === store)

  useCursor(hovered)

  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/windowwithmeshesscaled3.glb')
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null} position={[0, 0, 0]}>
      <group name='Scene'>
        <pointLight
          name='Light'
          intensity={54351.413}
          decay={2}
          position={[5.446, 6.528, -21.966]}
          rotation={[-1.839, 0.602, 1.932]}
          scale={1.741}
        />

        <mesh
          name='Mesh61'
          geometry={nodes.Mesh61.geometry}
          material={materials.Steel}
          position={[-11.348, -0.074, 30.383]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.001}
        />
        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh60'
          geometry={nodes.Mesh60.geometry}
          material={materials.Steel}
          position={[-28.774, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh58'
          geometry={nodes.Mesh58.geometry}
          material={materials.Steel}
          position={[-28.774, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh57'
          geometry={nodes.Mesh57.geometry}
          material={materials.Steel}
          position={[-28.774, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh65'
          geometry={nodes.Mesh65.geometry}
          material={materials['02 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            console.log(selected)
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh64'
          geometry={nodes.Mesh64.geometry}
          material={materials['02 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            console.log(selected)
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh63'
          geometry={nodes.Mesh63.geometry}
          material={materials['01 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh62'
          geometry={nodes.Mesh62.geometry}
          material={materials['01 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh59'
          geometry={nodes.Mesh59.geometry}
          material={materials['01 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh56'
          geometry={nodes.Mesh56.geometry}
          material={materials['01 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh55'
          geometry={nodes.Mesh55.geometry}
          material={materials['09 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh54'
          geometry={nodes.Mesh54.geometry}
          material={materials['09 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh53'
          geometry={nodes.Mesh53.geometry}
          material={materials['02 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>

        <mesh
          userData={{ store }}
          onClick={(e) => {
            e.stopPropagation
            setSelected(e.object)
            console.log(e.object.name)

            debugger
          }}
          onPointerEnter={() => setShiny(true)}
          onPointerLeave={() => setShiny(false)}
          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
          onPointerOut={(e) => setHover(false)}
          name='Mesh52'
          geometry={nodes.Mesh52.geometry}
          material={materials['02 - Default']}
          position={[-28.762, 5.617, 31.252]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.741}
        >
          <Edges visible={isSelected} scale={1.1} renderOrder={1000}>
            <meshBasicMaterial transparent color='#333' depthTest={false} />
          </Edges>
          <meshPhongMaterial color={shiny ? 0xff00ff : 0xffffff} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/windowwithmeshesscaled3.glb')
