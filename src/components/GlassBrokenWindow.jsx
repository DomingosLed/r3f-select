/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 GlassBrokenWindow.glb --transform 
Files: GlassBrokenWindow.glb [1.33MB] > /Users/led/Downloads/GlassBrokenWindow-transformed.glb [177.27KB] (87%)
*/

import React, { useRef, useState } from 'react'
import { useGLTF, Select, Html } from '@react-three/drei'

import { Panel, useControls, FirstLevaControl } from './FirstLevaControl'

import {
  select,
  useSelect,
  Sky,
  ContactShadows,
  Edges,
  Environment,
  OrbitControls,
  MeshTransmissionMaterial,
  useCursor,
  PresentationControls,
} from '@react-three/drei'

export function Pvcwindow(props) {
  const { nodes, materials } = useGLTF('/GlassBrokenWindow-transformed.glb')
  const [hovered, setHover] = useState(false)
  const selected = useSelect().map((sel) => sel.userData.store)
  const [store, materialProps] = useControls(selected, {
    color: { value: 0xffffff },
    roughness: { value: 1, min: 0, max: 1 },
    thickness: { value: 1, min: -10, max: 10 },
    envMapIntensity: { value: 2, min: 0, max: 10 },
    transmission: { value: 2, min: 0, max: 1 },
    //...(metalness !== undefined && { metalness: { value: 2, min: 0, max: 1 } })
  })

  const setSelect = useSelect().map((sel) => sel.userData.store)
  const isSelected = !!setSelect.find((sel) => sel === store)
  useCursor(hovered)
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.WindowFrame.geometry}
        material={materials.WindowFrame}
        scale={[1, 1.5, 1.5]}
        {...props}
        userData={{ store }}
        onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
        onPointerOut={(e) => setHover(false)}
      ></mesh>
      <mesh
        geometry={nodes.WindowsGlass.geometry}
        material={materials.WindowGlass}
        scale={[1, 1.5, 1.5]}
        {...props}
        userData={{ store }}
        onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
        onPointerOut={(e) => setHover(false)}
      ></mesh>

      <mesh
        geometry={nodes.WindowClasp.geometry}
        material={materials.WindowClasp}
        {...props}
        userData={{ store }}
        onPointerOver={(e) => (e.stopPropagation(), setHover(true))}
        onPointerOut={(e) => setHover(false)}
      ></mesh>
    </group>
  )
}

useGLTF.preload('/GlassBrokenWindow-transformed.glb')
